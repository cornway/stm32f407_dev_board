#ifndef VM_THREAD
#define VM_THREAD

#ifdef __cplusplus
    extern "C" {
#endif

#include "stdint.h"
#include "machM4.h"

#ifndef     VM_THREAD_MAX_PRIORITY  
#define     VM_THREAD_MAX_PRIORITY  (8U)
#endif
        
#ifndef     VM_DEF_THREAD_HEAP_SIZE
#define     VM_DEF_THREAD_HEAP_SIZE (4096U)
#endif
        
#ifndef     VM_MIN_THREAD_HEAP_SIZE
#define     VM_MIN_THREAD_HEAP_SIZE (FPU_STACK_SIZE + CPU_STACK_SIZE + 64)
#endif
        
#ifndef     VM_DEF_THREAD_NAME_LEN
#define     VM_DEF_THREAD_NAME_LEN (24U)
#endif
        
#ifndef     NULL
#define     NULL    ((void *)0)
#endif

#define     IDLE_THREAD_ID  (0U)


_EXTERN void *vmalloc (UINT_T size);
_EXTERN void vmfree (void *p);       

typedef _PACKED struct {
    _CALLBACK Callback;
    WORD_T StackSize;
    BYTE_T Priority;
    const char *Name;
} THREAD_HANDLE;
        

        
enum {
    THREAD_STOP = 0x0U,
    THREAD_RUN  = 0x1U,
    THREAD_PEND = 0x2U,
};

enum {
    THREAD_NO_FPU = 0x0U,
    THREAD_FPU = 0x1U,
};

enum {
    T_OK,
    T_LONG_NAME,
    T_SMALL_HEAP,
    T_SMALL_CORE,
    T_NULL_CALLBACK,
    T_PRIV_UNDEF,
    T_PRIOR_UNDEF,
};


        


typedef _PACKED struct {
    CPU_STACK_FRAME *CPU_FRAME;
    WORD_T DELAY;
    BYTE_T STATUS;
    BYTE_T FPU_STATUS;
    BYTE_T PRIVILEGE;
    WORD_T HEAP;
    WORD_T HEAP_SIZE;
    INT_T  ID;
    BYTE_T PRIORITY;
    BYTE_T D_PRIORITY;
    _CALLBACK CALLBACK;
    char name[VM_DEF_THREAD_NAME_LEN];
    void *nextLink;
    void *prevLink;
    
    void *link;
    unsigned mutex : 1;
    
    unsigned fault : 1;
    const char *faultMessage;
    
    unsigned notify : 1;
} THREAD;


typedef struct {
    THREAD *firstLink;
    THREAD *lastLink;
    BYTE_T elements;
} THREAD_LIST;


void init_core (void);
int thread_init (THREAD **t, _CALLBACK callback, BYTE_T priority, WORD_T id, WORD_T heap_size, BYTE_T privilege, const char *name);
THREAD *get_ready (UINT_T priority);
void unlink (THREAD *t);
void link (THREAD *t);
void link_wait (THREAD *t);
void link_delay (THREAD *t);
void link_fault (THREAD *t);
void link_notify (THREAD *t);
void unlink_notify (THREAD *t);
THREAD *notify (const char *name);
int check_prio_list (void);
void refresh_prio_list (void);
void threads_tick (void);
        
#ifdef __cplusplus
    }
#endif

#endif /*VM_THREAD*/


/*End of file*/

