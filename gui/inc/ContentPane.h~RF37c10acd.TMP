#ifndef G_CONTENT_PANE
#define G_CONTENT_PANE

#include <string.h>

#include "gui_defs.h"
#include "iterable.h"
#include "graphicFrameClass.h"
#include "graphic.h"
#include "GLabel.h"
#include "GSlide.h"
#include "GKeypad.h"
#include "textField.h"
#include "NonPaletteComponentInterface.h"
#include "DefaultCursorObject.h"
#include "touch.h"




enum ComponentTypeId {
    SilentComponent = -1,
    ComponentLabelTypeId = 0,
    ComponentSliderTypeId = 1,
    ComponentButtonTypeId = 2, 
    ComponentTextFieldTypeId = 3,


    NonPaletteComponentTypeId = 33,    
};



typedef struct {
	ComponentTypeId id;
	void *component;
} ComponentDsc;

#define ACCESS_COMPONENT(ret, dsc, action, args ...) \
do { \
    switch (dsc.id) { \
        case SilentComponent : \
            break; \
        case ComponentLabelTypeId : ret = ((GLabel<Color, Range, white> *)dsc.component)->action(args); \
            break; \
        case ComponentSliderTypeId : ret = ((GSlide<Color, Range, white> *)dsc.component)->action(args); \
            break; \
        case ComponentButtonTypeId : ret = ((GButton<Color, Range, white> *)dsc.component)->action(args); \
            break; \
        case ComponentTextFieldTypeId : ret = ((GTextField<Color, Range, white> *)dsc.component)->action(args); \
            break; \
        case NonPaletteComponentTypeId : ret = ((NonPalette<Color, Range, white> *)dsc.component)->action(args); \
            break; \
    }; \
    } \
    while (0)
        
#define ACCESS_VCOMPONENT(dsc, action, args ...) \
do { \
    switch (dsc.id) { \
        case SilentComponent : \
            break; \
        case ComponentLabelTypeId : ((GLabel<Color, Range, white> *)dsc.component)->action(args); \
            break; \
        case ComponentSliderTypeId : ((GSlide<Color, Range, white> *)dsc.component)->action(args); \
            break; \
        case ComponentButtonTypeId : ((GButton<Color, Range, white> *)dsc.component)->action(args); \
            break; \
        case ComponentTextFieldTypeId : ((GTextField<Color, Range, white> *)dsc.component)->action(args); \
            break; \
        case NonPaletteComponentTypeId : ((NonPalette<Color, Range, white> *)dsc.component)->action(args); \
            break; \
    }; \
    } \
    while (0)
		

#define GET_FROM_COMPONENT(dsc, action, value) \
do { \
    switch (dsc.id) { \
        case SilentComponent : \
            break; \
        case ComponentLabelTypeId : value = ((GLabel<Color, Range, white> *)dsc.component)->action(); \
            break; \
        case ComponentSliderTypeId : value = ((GSlide<Color, Range, white> *)dsc.component)->action(); \
            break; \
        case ComponentButtonTypeId : value = ((GButton<Color, Range, white> *)dsc.component)->action(); \
            break; \
        case ComponentTextFieldTypeId : value = ((GTextField<Color, Range, white> *)dsc.component)->action(); \
            break; \
        case NonPaletteComponentTypeId : value = ((NonPalette<Color, Range, white> *)dsc.component)->action(); \
            break; \
    }; \
    } \
    while (0)

typedef struct {
    int num;
    void *component;
} ComponentNum;

template <typename Color, typename Range, Color white>
	class GuiEngine;

class Component : public Link<Component> {
	private :
		ComponentDsc dsc;
	public :
		Component (void *component, ComponentTypeId id) : Link<Component> () 
		{
			this->dsc.component = component;
			this->dsc.id = id;
		}
		
		ComponentDsc
		get ()
		{
			return this->dsc;
		}
};

template <typename Color, typename Range, Color white>
  class GContentPane : public virtual Dimension<Range>,
                       public GSelectable<Color, Range, white>,
                       public Link<GContentPane<Color, Range, white> > {
    private :
        GraphicFrame<Color, Range> *frame;
		
		const tImage<Color> *cursorIcon;
        Point<Range> cursorPos;
		
        ArrayListBase<GLabel<Color, Range, white> > gLabels;
        ArrayListBase<GSlide<Color, Range, white> > gSliders;
        ArrayListBase<GButton<Color, Range, white> > gButtons;
        ArrayListBase<GTextField<Color, Range, white> > gTextFields;
        ArrayListBase<NonPalette<Color, Range, white> > gComponents;
    
        array::Array<ComponentDsc> *packedArray;
    
    
    
        ComponentTypeId selectedComponentId;
        int32_t selectedComponentType;
        void *selectedComponent;
        int elementsCount;
		bool packed;
		
		template <typename Component>
		void *
        checkComponentName (ArrayListBase<Component> &array, const char *name)
		{
			Component *c = array.getFirst();
			while (c != nullptr) {
				if ( strcmp(name, c->getName()) == 0) {
					return (void *)c;
				}
				c = c->next();
			}
			return nullptr;
		}
        
        template <typename Component>
        ComponentNum
        checkComponentNum (ArrayListBase<Component> &array, int num)
        {
            ComponentNum cNum = {num, nullptr};
            cNum.component = array.get(num);
            if (cNum.component == nullptr) {
                cNum.num = num - array.size();
                return cNum;
            }
            cNum.num = 0;
            return cNum;
        }
		
        bool test (ViewPort<Range> &w,  Box<Range> p)
        {
            if (w.testTrueViewPoint( p.x, p.y ) == true) {
                    return true;
            }
            if (w.testTrueViewPoint( p.x + p.w, p.y ) == true) {
                    return true;
            }
            if (w.testTrueViewPoint( p.x, p.y + p.h ) == true) {
                    return true;
            }
            if (w.testTrueViewPoint( p.x + p.w, p.y + p.h ) == true) {
                    return true;
            }
            return false;
        }
    
        template <typename Element>
        void repaint (ArrayListBase<Element> &list, ViewPort<Range> &w)
        {
            Element *it = list.getFirst();
            while (it != nullptr) {
                if (test(w, it->getBox()) == true) {
                    it->repaint();
                }
                it = it->next();
            }
        }
        
        template <typename Element>
        void repaintTemporaries (ArrayListBase<Element> &list, ViewPort<Range> &w)
        {
            Element *it = list.getFirst();
            Element *removing = it;
            while (it != nullptr) {
                if ( test(w, it->getBox()) == true) {
                    it->repaint();
                }
                removing = it;
                it = it->next();
                if (removing->isTimeElapse() == true) {
                    list.remove(removing);
                    /*it->destructor()*/
                }
            }
        }
        
        template <typename Element>
        int fireSensorPane(ArrayListBase<Element> &components, TouchPointTypeDef arg, uint32_t cause)
        {
            if (this->testPoint(arg.point) == false) {
                return -1;
            }
            selectedComponentId = (ComponentTypeId)-1;
            components.foreach([&](Element *e) -> void {
                if (selectedComponentId > 0) {
                    return;
                }
                selectedComponentId = (ComponentTypeId)e->fireSensor(arg, cause);
                if (selectedComponentId > 0) {
                    selectedComponent = e;
                    e->setSelectColor(0xf0f0);
                    e->setSelect();
                }
            });
            return selectedComponentId;
        }

        GContentPane (Graphic<Color, Range, white> *g) : GSelectable<Color, Range, white> (g)
        {
            frame = g->getBaseFrame();
            Box<Range> box = frame->getBox();
            this->setSize(box);     
            cursorPos.x = 0;
            cursorPos.y = 0;
            this->selectedComponentId = SilentComponent;
            this->selectedComponentType = SilentComponent;
            this->selectedComponent = nullptr;
            this->elementsCount = 0;
			this->packed = false;
            this->cursorIcon = nullptr;
        }
        ~GContentPane ()
        {
            //delete(this);
        }
        friend class GuiEngine<Color, Range, white>;
    public :
        
		void
		pack ()
		{	
            if (this->packed == false) {
                this->packedArray = new array::Array<ComponentDsc>(this->elementsCount);
                gLabels.foreach([&](GLabel<Color, Range, white> *component) ->void {
                    ComponentDsc dsc = {ComponentLabelTypeId, component};
                    this->packedArray->push(dsc);
                });
                gSliders.foreach([&](GSlide<Color, Range, white> *component) ->void {
                    ComponentDsc dsc = {ComponentSliderTypeId, component};
                    this->packedArray->push(dsc);
                });
                gButtons.foreach([&](GButton<Color, Range, white> *component) ->void {
                    ComponentDsc dsc = {ComponentButtonTypeId, component};
                    this->packedArray->push(dsc);
                });
                gTextFields.foreach([&](GTextField<Color, Range, white> *component) ->void {
                    ComponentDsc dsc = {ComponentTextFieldTypeId, component};
                    this->packedArray->push(dsc);
                });
                /*
                gGraphics.foreach([](GraphicObject<Color, Range, white> *component) ->void {
                    this->packedArray.add( new Component(component, ?) );
                });
                gTempGraphics.foreach([](TGraphicComponent<Color, Range, white> *component) ->void {
                    this->packedArray.add( new Component(component, ?) );
                });
                */
                gComponents.foreach([&](NonPalette<Color, Range, white> *component) ->void {
                    ComponentDsc dsc = {NonPaletteComponentTypeId, component};
                    this->packedArray->push(dsc);
                });
                this->packed = true;
            } else {
                this->packed = false;
                delete this->packedArray;
                this->pack();
            }
		}
		
		void
		unPack ()
		{
			this->packed = false;
            delete this->packedArray;
		}
        
        
        void 
		fill (Color color)
        {
            frame->fill(color);
        }
        
        void 
		fill ()
        {
            frame->fill(this->background);
        }
        
        
        template <class C> 
        C *
		createComponent (int x, int y, int w, int h)
        {
            auto c = (C *) new C(this->graphic);
            c->setSize((Range)x, (Range)y, (Range)w, (Range)h);
            return c;
        }
				
		template <class C, class Range> 
        C *
		createComponent (Dimension<Range> &d)
        {
           return this->createComponent(d.x, d.y, d.w, d.h);
        }
				
        template <class C> 
        C *
		createComponent ()
        {
            auto c = (C *) new C(this->graphic);
            c->setSize(this->x, this->y, this->w, this->h);
            return c;
        }
				
        NonPalette<Color, Range, white> *
		createNonPaletteComponent ( void (*repaintHook) (NonPalette<Color, Range, white> *))
        {
            auto c = new NonPalette<Color, Range, white>(this->graphic, repaintHook);
            c->setContentPane(this);
            return c;
        }
				
        NonPalette<Color, Range, white> *
		createNonPaletteComponent (int x, int y, int w, int h, void (*repaintHook) (NonPalette<Color, Range, white> *))
        {
            auto c = new NonPalette<Color, Range, white>(this->graphic, repaintHook);
            c->setSize((Range)x, (Range)y, (Range)w, (Range)h);
            c->setContentPane(this);
            return c;
        }
        
        void 
		addLabel (GLabel<Color, Range, white> *l)
        {
            /*if (list.contain(c) == false)*/
            elementsCount++;
            gLabels.addFirst(l);
        }
        void 
		addSlider (GSlide<Color, Range, white> *S)
        {
            /*if (list.contain(c) == false)*/
            elementsCount++;
            gSliders.addFirst(S);
        }
        void 
		addButton (GButton<Color, Range, white> *K)
        {
            /*if (list.contain(c) == false)*/
            elementsCount++;
            gButtons.addFirst(K);
        }
        void 
		addTextFied (GTextField<Color, Range, white> *c)
        {
            /*if (list.contain(c) == false)*/
            elementsCount++;
            gTextFields.addFirst(c);
        }
        //
        void 
		addNonPalette (NonPalette<Color, Range, white> *I)
        {
            /*if (list.contain(c) == false)*/
            elementsCount++;
            gComponents.addFirst(I);
        }
        
        
        
        GraphicFrame<Color, Range> *
		getFrame ()
        {
            return frame;
        }
        
        
        
        
        void 
		repaint (ViewPort<Range> &w)
        {
            if (this->visible == false) {
                return;
            }
            repaint(gTextFields, w);
            repaint(gSliders, w);
            repaint(gLabels, w);
            repaint(gButtons, w);
            repaint(gComponents, w);
			if (this->cursorIcon != nullptr) {
				this->getGraphic()->fill(this->cursorPos.x, this->cursorPos.y, this->cursorIcon);
			}
        }
				
        
        int32_t 
		fireSensor (TouchPointTypeDef arg, uint32_t cause)
        {
            if (this->silent == true) {
                return -1;
            }
            this->cursorPos.x = arg.point.x;
            this->cursorPos.y = arg.point.y;
            int32_t id = -1;
            if (selectedComponent != nullptr) {
                ComponentDsc dsc;
                dsc.id = (ComponentTypeId)selectedComponentType;
                dsc.component = selectedComponent;
                ACCESS_COMPONENT(id, dsc, fireSensor, arg, cause);
                if (cause == SENSOR_RELEASE) {
                    int glow = 0;
                    switch (sizeof(Color)) {
                        case 1 :    glow = 0;
                            break;
                        case 2 :    glow = GET_GREY_16BPP(0);
                            break;
                        case 3 :    glow = 0;
                            break;
                        case 4 :    glow = 0;
                            break;
                    }
                    ACCESS_VCOMPONENT(dsc, setGlow, glow);
                    selectedComponentType = SilentComponent;
                    selectedComponent = nullptr;  
                    return id;
                } else {
                    return -1;
                }
            } else if (this->packed == true) {
                ComponentDsc dsc;
                uint32_t size = this->packedArray->getSize();
                for (uint32_t i = 0; i < size; i++) {
                    dsc = this->packedArray->get(i);
                    ACCESS_COMPONENT(id, dsc, fireSensor, arg, cause);
                    if((id > 0) && (cause != SENSOR_RELEASE)) {
                        selectedComponentType = dsc.id;
                        selectedComponent = dsc.component;
                        break;
                    } else {
                        selectedComponentType = SilentComponent;
                        selectedComponent = nullptr;
                        break;
                    }
                }
                return id;
            } else {
                selectedComponent = nullptr;
                id = fireSensorPane(gButtons, arg, cause);
                if (id >= 0) {
                    selectedComponentType = ComponentButtonTypeId;
                    return id;
                }
                id = fireSensorPane(gLabels, arg, cause);
                if (id >= 0) {
                    selectedComponentType = ComponentLabelTypeId;
                    return id;
                }
                id = fireSensorPane(gSliders, arg, cause);
                if (id >= 0) {
                    selectedComponentType = ComponentSliderTypeId;
                    return id;
                }
                id = fireSensorPane(gTextFields, arg, cause);
                if (id >= 0) {
                    selectedComponentType = ComponentTextFieldTypeId;
                    return id;
                }
                id = fireSensorPane(gComponents, arg, cause);
                if (id >= 0) {
                    selectedComponentType = NonPaletteComponentTypeId;
                    return id;
                }
            }
            return -1;
        }

		ComponentDsc
		getComponentByName (const char *name)
		{
			ComponentDsc dsc = {SilentComponent, nullptr};
			char *component_name;
			if (this->packed == true) {
                this->packedArray->foreach([&](ComponentDsc &component_dsc) ->void{
                    GET_FROM_COMPONENT(component_dsc, getName, component_name);
                    if (strcmp(name, component_name) == 0) {
						dsc = component_dsc;
					}
                });
				return dsc;
			}
			dsc.component = this->checkComponentName(gLabels, name);
			if (dsc.component != nullptr) {
				dsc.id = ComponentLabelTypeId;
				return dsc;
			}
			
			dsc.component = this->checkComponentName(gSliders, name);
			if (dsc.component != nullptr) {
				dsc.id = ComponentSliderTypeId;
				return dsc;
			}
			
			dsc.component = this->checkComponentName(gButtons, name);
			if (dsc.component != nullptr) {
				dsc.id = ComponentButtonTypeId;
				return dsc;
			}
			
			dsc.component = this->checkComponentName(gTextFields, name);
			if (dsc.component != nullptr) {
				dsc.id = ComponentTextFieldTypeId;
				return dsc;
			}
			/*
			dsc.component = this->checkComponentName(gTempGraphics, name);
			if (dsc.component != nullptr) {
				dsc.id = ?;
				return dsc;
			}
			*/
			
			dsc.component = this->checkComponentName(gComponents, name);
			if (dsc.component != nullptr) {
				dsc.id = NonPaletteComponentTypeId;
				return dsc;
			}
			return dsc;
			
		}
        
        ComponentDsc 
        accessElement (int element)
        {
            ComponentDsc dsc = {SilentComponent, nullptr};
            ComponentNum cNum = {element, nullptr};
            if (element == 0) {
                return dsc;
            }
            if (this->packed == true) {
                element--;
                if (this->packedArray->getSize() < element) {
                    return dsc;
                } else {
                    return this->packedArray->get(element);
                }
			}
            cNum = checkComponentNum(gLabels, cNum.num);
            if (cNum.component != nullptr) {
                dsc.id = ComponentLabelTypeId;
                dsc.component = cNum.component;
                return dsc;
            }
            cNum = checkComponentNum(gSliders, cNum.num);
            if (cNum.component != nullptr) {
                dsc.id = ComponentSliderTypeId;
                dsc.component = cNum.component;
                return dsc;
            }
            cNum = checkComponentNum(gButtons, cNum.num);
            if (cNum.component != nullptr) {
                dsc.id = ComponentButtonTypeId;
                dsc.component = cNum.component;
                return dsc;
            }
            cNum = checkComponentNum(gTextFields, cNum.num);
            if (cNum.component != nullptr) {
                dsc.id = ComponentTextFieldTypeId;
                dsc.component = cNum.component;
                return dsc;
            }
            /*
            cNum = checkComponentNum(gTempGraphics, element);
            if (cNum.component != nullptr) {
                dsc.id = ?;
                dsc.component = cNum.component;
                return dc;
            }
            */
            
            cNum = checkComponentNum(gComponents, cNum.num);
            if (cNum.component != nullptr) {
                dsc.id = NonPaletteComponentTypeId;
                dsc.component = cNum.component;
                return dsc;
            }
            return dsc;
            
        }
        
        
            
        
        
        /*
            this methods are not provide access level check - 
            accessible component can be from another content pane
        */
        /*Access*/
        void
        setSelectComponent (ComponentDsc dsc, bool select)
        {  
            int res;
            ACCESS_COMPONENT(res, dsc, setSelect, select);
        }
        
        void
        setComponentText (ComponentDsc dsc, const char *text)
        {
            int res;
            ACCESS_COMPONENT(res, dsc, setText, (char *)text);
        }
        
		template <typename Value>
        void
        setComponentText (ComponentDsc dsc, Value value)
        {
            int res;
            ACCESS_COMPONENT(res, dsc, setText, value);
        }
        
        void
        apendComponentText (ComponentDsc dsc, const char *text)
        {
            int res;
            ACCESS_COMPONENT(res, dsc, apendText, (char *)text);
        }
        
		template <typename Value>
        void
        apendComponentText (ComponentDsc dsc, Value value)
        {
            int res;
            ACCESS_COMPONENT(res, dsc, apendText, value);
        }
        
        template <typename Listener>
        void
        setUserActionListener (ComponentDsc dsc, Listener listener)
        {
            int res;
            ACCESS_COMPONENT(res, dsc, addUserEvent, listener);
        }
        
        template <typename Event>
        void
        performUserActionEvent (ComponentDsc dsc, Event event)
        {
            int res;
            ACCESS_COMPONENT(res, dsc, performUserActionEvent, event);
        }
        
        void
        removeAllUserActionListeners (ComponentDsc dsc)
        {
            int res;
            ACCESS_COMPONENT(res, dsc, removeAllUserEventLiteners, false);
        }
        
        
        
        void
        setSelectComponent (const char *name, bool select)
        {  
            ACCESS_VCOMPONENT(getComponentByName(name) , setSelect, select);
        }
        
        void
        setComponentText (const char *name, char *text)
        {
            ACCESS_VCOMPONENT(getComponentByName(name) , setText, text);
        }
        
        template <typename Value>
        void
        setComponentText (const char *name, Value value)
        {
            ACCESS_VCOMPONENT(getComponentByName(name) , setText, value);
        }
		
        
        void
        appendComponentText (const char *name, char *text)
        {
            ACCESS_VCOMPONENT(getComponentByName(name) , appendText, (char *)text);
        }
		
		void
        appendComponentText (ComponentDsc dsc, char *text)
        {
            ACCESS_VCOMPONENT(dsc, appendText, (char *)text);
        }
		
		void 
		setComponentBackgroundColor (ComponentDsc dsc, Color color)
		{
			ACCESS_VCOMPONENT(dsc , setBackground, color);
		}
        
		void 
		setComponentBackgroundColor (const char *name, Color color)
		{
			ACCESS_VCOMPONENT(getComponentByName(name) , setBackground, color);
		}
		
		void 
		setComponentForegroundColor (ComponentDsc dsc, Color color)
		{
			ACCESS_VCOMPONENT(dsc , setForeground, color);
		}
        
		void 
		setComponentForegroundColor (const char *name, Color color)
		{ 
			ACCESS_VCOMPONENT(getComponentByName(name) , setForeground, color);
		}
		
        template <typename Listener>
        void
        setUserActionListener (const char *name, Listener listener)
        {
            int res;
            ACCESS_COMPONENT( res, getComponentByName(name) , addUserEvent, listener);
        }
        
        template <typename Event>
        void
        performUserActionEvent (const char *name, Event event)
        {
            int res;
            ACCESS_COMPONENT( res, getComponentByName(name) , performUserActionEvent, event);
        }
        
        void
        removeAllUserActionListeners (const char *name)
        {
            int res;
            ACCESS_COMPONENT( res, getComponentByName(name) , removeAllUserEventLiteners, false);
        }
        /*Access*/
        
        
        int getTotalElementsCount ()
        {
            return this->elementsCount;
        }
				
		template <typename Img>
		void setCursorIcon (Img *img)
		{
			this->cursorIcon = img;
		}
				
};





#endif 


/*End of file*/

